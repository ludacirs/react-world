/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * Conduit API
 * Conduit API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type { ProfileResponse, GenericErrorModel } from '../../models';
import { axiosInstance } from '../../axios/axiosInstance';

/**
 * Get a profile of a user of the system. Auth is optional
 * @summary Get a profile
 */
export const getProfileByUsername = (username: string, signal?: AbortSignal) => {
  return axiosInstance<ProfileResponse>({ url: `/profiles/${username}`, method: 'get', signal });
};

export const getGetProfileByUsernameQueryKey = (username: string) => [`/profiles/${username}`] as const;

export const getGetProfileByUsernameQueryOptions = <
  TData = Awaited<ReturnType<typeof getProfileByUsername>>,
  TError = void | GenericErrorModel,
>(
  username: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getProfileByUsername>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getProfileByUsername>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProfileByUsernameQueryKey(username);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfileByUsername>>> = ({ signal }) =>
    getProfileByUsername(username, signal);

  return { queryKey, queryFn, enabled: !!username, ...queryOptions };
};

export type GetProfileByUsernameQueryResult = NonNullable<Awaited<ReturnType<typeof getProfileByUsername>>>;
export type GetProfileByUsernameQueryError = void | GenericErrorModel;

/**
 * @summary Get a profile
 */
export const useGetProfileByUsername = <
  TData = Awaited<ReturnType<typeof getProfileByUsername>>,
  TError = void | GenericErrorModel,
>(
  username: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getProfileByUsername>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetProfileByUsernameQueryOptions(username, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Follow a user by username
 * @summary Follow a user
 */
export const followUserByUsername = (username: string) => {
  return axiosInstance<ProfileResponse>({ url: `/profiles/${username}/follow`, method: 'post' });
};

export const getFollowUserByUsernameMutationOptions = <
  TError = void | GenericErrorModel,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof followUserByUsername>>,
    TError,
    { username: string },
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof followUserByUsername>>, TError, { username: string }, TContext> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof followUserByUsername>>,
    { username: string }
  > = props => {
    const { username } = props ?? {};

    return followUserByUsername(username);
  };

  return { mutationFn, ...mutationOptions };
};

export type FollowUserByUsernameMutationResult = NonNullable<Awaited<ReturnType<typeof followUserByUsername>>>;

export type FollowUserByUsernameMutationError = void | GenericErrorModel;

/**
 * @summary Follow a user
 */
export const useFollowUserByUsername = <TError = void | GenericErrorModel, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof followUserByUsername>>,
    TError,
    { username: string },
    TContext
  >;
}) => {
  const mutationOptions = getFollowUserByUsernameMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Unfollow a user by username
 * @summary Unfollow a user
 */
export const unfollowUserByUsername = (username: string) => {
  return axiosInstance<ProfileResponse>({ url: `/profiles/${username}/follow`, method: 'delete' });
};

export const getUnfollowUserByUsernameMutationOptions = <
  TError = void | GenericErrorModel,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unfollowUserByUsername>>,
    TError,
    { username: string },
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof unfollowUserByUsername>>, TError, { username: string }, TContext> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof unfollowUserByUsername>>,
    { username: string }
  > = props => {
    const { username } = props ?? {};

    return unfollowUserByUsername(username);
  };

  return { mutationFn, ...mutationOptions };
};

export type UnfollowUserByUsernameMutationResult = NonNullable<Awaited<ReturnType<typeof unfollowUserByUsername>>>;

export type UnfollowUserByUsernameMutationError = void | GenericErrorModel;

/**
 * @summary Unfollow a user
 */
export const useUnfollowUserByUsername = <TError = void | GenericErrorModel, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unfollowUserByUsername>>,
    TError,
    { username: string },
    TContext
  >;
}) => {
  const mutationOptions = getUnfollowUserByUsernameMutationOptions(options);

  return useMutation(mutationOptions);
};
