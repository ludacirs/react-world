/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * Conduit API
 * Conduit API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  MultipleArticlesResponse,
  GenericErrorModel,
  GetArticlesFeedParams,
  GetArticlesParams,
  SingleArticleResponse,
  NewArticleRequest,
  UpdateArticleRequest,
} from '../../models';
import { axiosInstance } from '../../axios/axiosInstance';

/**
 * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
 * @summary Get recent articles from users you follow
 */
export const getArticlesFeed = (params?: GetArticlesFeedParams, signal?: AbortSignal) => {
  return axiosInstance<MultipleArticlesResponse>({ url: `/articles/feed`, method: 'get', params, signal });
};

export const getGetArticlesFeedQueryKey = (params?: GetArticlesFeedParams) =>
  [`/articles/feed`, ...(params ? [params] : [])] as const;

export const getGetArticlesFeedQueryOptions = <
  TData = Awaited<ReturnType<typeof getArticlesFeed>>,
  TError = void | GenericErrorModel,
>(
  params?: GetArticlesFeedParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getArticlesFeed>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getArticlesFeed>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetArticlesFeedQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getArticlesFeed>>> = ({ signal }) =>
    getArticlesFeed(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetArticlesFeedQueryResult = NonNullable<Awaited<ReturnType<typeof getArticlesFeed>>>;
export type GetArticlesFeedQueryError = void | GenericErrorModel;

/**
 * @summary Get recent articles from users you follow
 */
export const useGetArticlesFeed = <
  TData = Awaited<ReturnType<typeof getArticlesFeed>>,
  TError = void | GenericErrorModel,
>(
  params?: GetArticlesFeedParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getArticlesFeed>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetArticlesFeedQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get most recent articles globally. Use query parameters to filter results. Auth is optional
 * @summary Get recent articles globally
 */
export const getArticles = (params?: GetArticlesParams, signal?: AbortSignal) => {
  return axiosInstance<MultipleArticlesResponse>({ url: `/articles`, method: 'get', params, signal });
};

export const getGetArticlesQueryKey = (params?: GetArticlesParams) =>
  [`/articles`, ...(params ? [params] : [])] as const;

export const getGetArticlesQueryOptions = <
  TData = Awaited<ReturnType<typeof getArticles>>,
  TError = void | GenericErrorModel,
>(
  params?: GetArticlesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getArticles>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getArticles>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetArticlesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getArticles>>> = ({ signal }) => getArticles(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetArticlesQueryResult = NonNullable<Awaited<ReturnType<typeof getArticles>>>;
export type GetArticlesQueryError = void | GenericErrorModel;

/**
 * @summary Get recent articles globally
 */
export const useGetArticles = <TData = Awaited<ReturnType<typeof getArticles>>, TError = void | GenericErrorModel>(
  params?: GetArticlesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getArticles>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetArticlesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create an article. Auth is required
 * @summary Create an article
 */
export const createArticle = (newArticleRequest: NewArticleRequest) => {
  return axiosInstance<SingleArticleResponse>({
    url: `/articles`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: newArticleRequest,
  });
};

export const getCreateArticleMutationOptions = <TError = void | GenericErrorModel, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createArticle>>,
    TError,
    { data: NewArticleRequest },
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof createArticle>>, TError, { data: NewArticleRequest }, TContext> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createArticle>>,
    { data: NewArticleRequest }
  > = props => {
    const { data } = props ?? {};

    return createArticle(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateArticleMutationResult = NonNullable<Awaited<ReturnType<typeof createArticle>>>;
export type CreateArticleMutationBody = NewArticleRequest;
export type CreateArticleMutationError = void | GenericErrorModel;

/**
 * @summary Create an article
 */
export const useCreateArticle = <TError = void | GenericErrorModel, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createArticle>>,
    TError,
    { data: NewArticleRequest },
    TContext
  >;
}) => {
  const mutationOptions = getCreateArticleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get an article. Auth not required
 * @summary Get an article
 */
export const getArticle = (slug: string, signal?: AbortSignal) => {
  return axiosInstance<SingleArticleResponse>({ url: `/articles/${slug}`, method: 'get', signal });
};

export const getGetArticleQueryKey = (slug: string) => [`/articles/${slug}`] as const;

export const getGetArticleQueryOptions = <TData = Awaited<ReturnType<typeof getArticle>>, TError = GenericErrorModel>(
  slug: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getArticle>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getArticle>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetArticleQueryKey(slug);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getArticle>>> = ({ signal }) => getArticle(slug, signal);

  return { queryKey, queryFn, enabled: !!slug, ...queryOptions };
};

export type GetArticleQueryResult = NonNullable<Awaited<ReturnType<typeof getArticle>>>;
export type GetArticleQueryError = GenericErrorModel;

/**
 * @summary Get an article
 */
export const useGetArticle = <TData = Awaited<ReturnType<typeof getArticle>>, TError = GenericErrorModel>(
  slug: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getArticle>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetArticleQueryOptions(slug, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Update an article. Auth is required
 * @summary Update an article
 */
export const updateArticle = (slug: string, updateArticleRequest: UpdateArticleRequest) => {
  return axiosInstance<SingleArticleResponse>({
    url: `/articles/${slug}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: updateArticleRequest,
  });
};

export const getUpdateArticleMutationOptions = <TError = void | GenericErrorModel, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateArticle>>,
    TError,
    { slug: string; data: UpdateArticleRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateArticle>>,
  TError,
  { slug: string; data: UpdateArticleRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateArticle>>,
    { slug: string; data: UpdateArticleRequest }
  > = props => {
    const { slug, data } = props ?? {};

    return updateArticle(slug, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateArticleMutationResult = NonNullable<Awaited<ReturnType<typeof updateArticle>>>;
export type UpdateArticleMutationBody = UpdateArticleRequest;
export type UpdateArticleMutationError = void | GenericErrorModel;

/**
 * @summary Update an article
 */
export const useUpdateArticle = <TError = void | GenericErrorModel, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateArticle>>,
    TError,
    { slug: string; data: UpdateArticleRequest },
    TContext
  >;
}) => {
  const mutationOptions = getUpdateArticleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete an article. Auth is required
 * @summary Delete an article
 */
export const deleteArticle = (slug: string) => {
  return axiosInstance<void>({ url: `/articles/${slug}`, method: 'delete' });
};

export const getDeleteArticleMutationOptions = <TError = GenericErrorModel, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteArticle>>, TError, { slug: string }, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteArticle>>, TError, { slug: string }, TContext> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteArticle>>, { slug: string }> = props => {
    const { slug } = props ?? {};

    return deleteArticle(slug);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteArticleMutationResult = NonNullable<Awaited<ReturnType<typeof deleteArticle>>>;

export type DeleteArticleMutationError = GenericErrorModel;

/**
 * @summary Delete an article
 */
export const useDeleteArticle = <TError = GenericErrorModel, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteArticle>>, TError, { slug: string }, TContext>;
}) => {
  const mutationOptions = getDeleteArticleMutationOptions(options);

  return useMutation(mutationOptions);
};
