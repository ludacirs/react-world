/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * Conduit API
 * Conduit API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  MultipleCommentsResponse,
  GenericErrorModel,
  SingleCommentResponse,
  NewCommentRequest,
} from '../../models';
import { axiosInstance } from '../../axios/axiosInstance';

/**
 * Get the comments for an article. Auth is optional
 * @summary Get comments for an article
 */
export const getArticleComments = (slug: string, signal?: AbortSignal) => {
  return axiosInstance<MultipleCommentsResponse>({ url: `/articles/${slug}/comments`, method: 'get', signal });
};

export const getGetArticleCommentsQueryKey = (slug: string) => [`/articles/${slug}/comments`] as const;

export const getGetArticleCommentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getArticleComments>>,
  TError = void | GenericErrorModel,
>(
  slug: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getArticleComments>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getArticleComments>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetArticleCommentsQueryKey(slug);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getArticleComments>>> = ({ signal }) =>
    getArticleComments(slug, signal);

  return { queryKey, queryFn, enabled: !!slug, ...queryOptions };
};

export type GetArticleCommentsQueryResult = NonNullable<Awaited<ReturnType<typeof getArticleComments>>>;
export type GetArticleCommentsQueryError = void | GenericErrorModel;

/**
 * @summary Get comments for an article
 */
export const useGetArticleComments = <
  TData = Awaited<ReturnType<typeof getArticleComments>>,
  TError = void | GenericErrorModel,
>(
  slug: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getArticleComments>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetArticleCommentsQueryOptions(slug, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create a comment for an article. Auth is required
 * @summary Create a comment for an article
 */
export const createArticleComment = (slug: string, newCommentRequest: NewCommentRequest) => {
  return axiosInstance<SingleCommentResponse>({
    url: `/articles/${slug}/comments`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: newCommentRequest,
  });
};

export const getCreateArticleCommentMutationOptions = <
  TError = void | GenericErrorModel,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createArticleComment>>,
    TError,
    { slug: string; data: NewCommentRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createArticleComment>>,
  TError,
  { slug: string; data: NewCommentRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createArticleComment>>,
    { slug: string; data: NewCommentRequest }
  > = props => {
    const { slug, data } = props ?? {};

    return createArticleComment(slug, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateArticleCommentMutationResult = NonNullable<Awaited<ReturnType<typeof createArticleComment>>>;
export type CreateArticleCommentMutationBody = NewCommentRequest;
export type CreateArticleCommentMutationError = void | GenericErrorModel;

/**
 * @summary Create a comment for an article
 */
export const useCreateArticleComment = <TError = void | GenericErrorModel, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createArticleComment>>,
    TError,
    { slug: string; data: NewCommentRequest },
    TContext
  >;
}) => {
  const mutationOptions = getCreateArticleCommentMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete a comment for an article. Auth is required
 * @summary Delete a comment for an article
 */
export const deleteArticleComment = (slug: string, id: number) => {
  return axiosInstance<void>({ url: `/articles/${slug}/comments/${id}`, method: 'delete' });
};

export const getDeleteArticleCommentMutationOptions = <TError = GenericErrorModel, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteArticleComment>>,
    TError,
    { slug: string; id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteArticleComment>>,
  TError,
  { slug: string; id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteArticleComment>>,
    { slug: string; id: number }
  > = props => {
    const { slug, id } = props ?? {};

    return deleteArticleComment(slug, id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteArticleCommentMutationResult = NonNullable<Awaited<ReturnType<typeof deleteArticleComment>>>;

export type DeleteArticleCommentMutationError = GenericErrorModel;

/**
 * @summary Delete a comment for an article
 */
export const useDeleteArticleComment = <TError = GenericErrorModel, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteArticleComment>>,
    TError,
    { slug: string; id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteArticleCommentMutationOptions(options);

  return useMutation(mutationOptions);
};
