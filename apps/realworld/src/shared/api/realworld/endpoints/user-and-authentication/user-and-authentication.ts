/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * Conduit API
 * Conduit API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  UserResponse,
  GenericErrorModel,
  LoginUserRequest,
  NewUserRequest,
  UpdateUserRequest,
} from '../../models';
import { axiosInstance } from '../../axios/axiosInstance';

/**
 * Login for existing user
 * @summary Existing user login
 */
export const login = (loginUserRequest: LoginUserRequest) => {
  return axiosInstance<UserResponse>({
    url: `/users/login`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: loginUserRequest,
  });
};

export const getLoginMutationOptions = <TError = void | GenericErrorModel, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: LoginUserRequest }, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: LoginUserRequest }, TContext> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, { data: LoginUserRequest }> = props => {
    const { data } = props ?? {};

    return login(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>;
export type LoginMutationBody = LoginUserRequest;
export type LoginMutationError = void | GenericErrorModel;

/**
 * @summary Existing user login
 */
export const useLogin = <TError = void | GenericErrorModel, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: LoginUserRequest }, TContext>;
}) => {
  const mutationOptions = getLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Register a new user
 * @summary Register a new user
 */
export const createUser = (newUserRequest: NewUserRequest) => {
  return axiosInstance<UserResponse>({
    url: `/users`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: newUserRequest,
  });
};

export const getCreateUserMutationOptions = <TError = GenericErrorModel, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: NewUserRequest }, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: NewUserRequest }, TContext> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createUser>>, { data: NewUserRequest }> = props => {
    const { data } = props ?? {};

    return createUser(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof createUser>>>;
export type CreateUserMutationBody = NewUserRequest;
export type CreateUserMutationError = GenericErrorModel;

/**
 * @summary Register a new user
 */
export const useCreateUser = <TError = GenericErrorModel, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof createUser>>, TError, { data: NewUserRequest }, TContext>;
}) => {
  const mutationOptions = getCreateUserMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Gets the currently logged-in user
 * @summary Get current user
 */
export const getCurrentUser = (signal?: AbortSignal) => {
  return axiosInstance<UserResponse>({ url: `/user`, method: 'get', signal });
};

export const getGetCurrentUserQueryKey = () => [`/user`] as const;

export const getGetCurrentUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = void | GenericErrorModel,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUser>>> = ({ signal }) => getCurrentUser(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetCurrentUserQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUser>>>;
export type GetCurrentUserQueryError = void | GenericErrorModel;

/**
 * @summary Get current user
 */
export const useGetCurrentUser = <
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = void | GenericErrorModel,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCurrentUserQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Updated user information for current user
 * @summary Update current user
 */
export const updateCurrentUser = (updateUserRequest: UpdateUserRequest) => {
  return axiosInstance<UserResponse>({
    url: `/user`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: updateUserRequest,
  });
};

export const getUpdateCurrentUserMutationOptions = <TError = void | GenericErrorModel, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCurrentUser>>,
    TError,
    { data: UpdateUserRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCurrentUser>>,
  TError,
  { data: UpdateUserRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCurrentUser>>,
    { data: UpdateUserRequest }
  > = props => {
    const { data } = props ?? {};

    return updateCurrentUser(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCurrentUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateCurrentUser>>>;
export type UpdateCurrentUserMutationBody = UpdateUserRequest;
export type UpdateCurrentUserMutationError = void | GenericErrorModel;

/**
 * @summary Update current user
 */
export const useUpdateCurrentUser = <TError = void | GenericErrorModel, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCurrentUser>>,
    TError,
    { data: UpdateUserRequest },
    TContext
  >;
}) => {
  const mutationOptions = getUpdateCurrentUserMutationOptions(options);

  return useMutation(mutationOptions);
};
